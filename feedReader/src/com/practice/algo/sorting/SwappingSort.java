/* ********************************************************************************
 * All rights reserved to Kiran Paladugu. If you find any thing useful send your
 * valueble feeback to paladugukiran@gmail.com.
 ******************************************************************************* */
package com.practice.algo.sorting;

public class SwappingSort {
    public static int swapCount;

    public int[] sort(int[] arr) {
        boolean flag = true;
        do {
            boolean result = false;
            for (int i = 0; i < arr.length; i++) {
                int next = i + 1;
                if (next == arr.length) {
                    continue;
                }
                if (swap(arr, i, next)) {
                    result = true;
                }
            }
            if (!result) {
                flag = false;
                result = false;
            }
        } while (flag);
        return arr;

    }

    public boolean swap(int arr[], int first, int second) {
        if (arr[first] > arr[second]) {
            int temp = arr[first];
            arr[first] = arr[second];
            arr[second] = temp;
            swapCount++;
            return true;
        }
        return false;
    }

    public static void main(String[] args) {
        int[] arr = ArrayGenerator.generateRandom(1000);
        arr = ArrayGenerator.generateArrayFromInput(
                "270,663,255,742,418,237,957,260,611,399,977,924,119,508,218,886,420,165,891,589,50,292,762,773,310,855,983,139,772,107,873,684,249,118,353,223,440,562,729,77,695,834,920,683,486,456,535,910,24,372,385,842,778,306,400,943,16,929,874,112,911,68,403,41,582,563,892,724,887,256,640,326,37,902,776,203,987,243,917,952,816,220,268,714,593,672,302,314,765,608,642,296,658,437,659,542,800,470,859,85,739,402,630,527,30,610,500,278,162,434,55,727,160,685,380,823,99,885,654,883,494,324,615,600,422,655,989,359,847,355,451,631,771,984,579,153,7,15,271,453,52,298,145,389,208,196,890,330,79,425,829,649,101,283,502,264,857,504,144,321,58,213,782,48,632,410,198,947,47,212,856,352,199,120,471,109,195,369,44,382,158,594,257,360,585,694,350,83,951,960,939,123,505,894,181,693,187,374,937,9,421,289,597,115,17,234,69,627,827,652,442,543,586,979,210,689,569,809,718,219,709,523,354,706,239,488,950,908,728,988,712,760,291,700,33,763,996,228,717,82,666,472,191,357,759,117,583,377,0,346,74,870,12,231,768,668,864,826,991,475,92,686,884,590,3,424,978,338,479,677,155,954,560,371,744,29,734,507,95,512,612,344,312,780,387,206,366,390,918,781,373,752,821,757,794,872,31,935,999,130,678,774,496,806,555,474,202,618,761,850,605,922,323,576,378,192,225,824,455,190,76,945,476,325,391,417,705,638,100,431,401,114,699,737,110,730,511,921,205,452,907,748,188,707,833,300,36,861,941,801,889,540,845,201,128,517,554,530,541,443,97,792,174,166,284,571,682,121,159,367,238,207,812,370,248,970,813,6,539,319,483,375,981,288,460,625,242,444,211,136,697,588,277,577,938,87,465,489,388,131,598,245,493,868,429,75,749,224,63,616,948,787,495,843,395,691,386,797,146,974,595,361,961,469,767,113,1,828,499,396,963,293,497,867,637,358,716,336,408,726,4,514,916,60,613,992,262,235,168,708,409,796,741,397,798,528,197,105,521,349,93,669,903,639,740,345,163,506,971,653,975,822,701,108,269,964,928,96,808,561,775,328,866,591,45,313,91,580,958,140,19,138,690,790,914,2,623,383,936,327,175,955,81,172,482,459,702,49,178,150,745,73,173,770,311,106,681,90,62,544,10,393,753,318,881,351,415,556,609,51,953,696,46,993,40,956,755,840,462,644,841,398,986,104,830,34,905,820,972,966,200,295,575,404,157,394,599,84,250,26,848,851,636,412,913,766,54,648,912,810,315,221,143,148,832,67,779,126,454,570,880,478,98,940,661,11,66,263,949,416,565,244,802,161,533,236,836,340,660,558,567,968,436,675,617,878,746,559,64,164,819,959,844,656,906,614,430,216,5,320,124,606,925,518,23,247,273,673,304,769,141,509,531,481,305,524,751,258,308,43,722,849,516,895,862,53,348,646,122,852,529,944,447,461,676,252,254,904,603,860,405,251,275,756,592,602,814,854,803,38,226,754,758,946,503,635,725,407,545,8,134,548,578,919,723,142,607,633,301,276,865,622,927,428,22,337,491,217,438,240,441,804,926,629,704,151,680,347,129,788,356,720,584,426,414,381,899,795,294,185,985,532,186,838,785,80,715,626,171,406,214,624,435,735,464,662,601,846,253,265,896,297,125,376,526,133,651,710,65,450,647,587,169,858,362,445,688,698,643,942,246,869,473,261,534,619,967,137,102,568,546,900,167,962,995,490,930,897,57,901,933,786,343,193,392,980,56,27,552,229,818,183,687,839,934,515,72,791,550,267,35,32,825,538,285,990,279,184,329,342,182,339,998,332,657,641,875,209,485,551,335,42,21,982,446,227,893,282,877,620,671,650,303,564,547,747,25,316,274,888,116,553,61,341,467,536,18,931,177,566,628,573,477,510,363,331,111,743,149,334,667,915,674,280,807,835,574,783,604,969,322,307,572,498,28,458,581,457,189,537,259,789,871,432,59,525,241,180,973,815,837,233,439,411,309,368,94,549,879,719,853,909,147,89,419,596,135,286,519,364,732,433,994,522,468,176,466,513,86,154,736,39,484,721,634,997,132,70,621,463,501,413,664,384,281,831,13,487,965,423,811,733,379,215,230,317,103,480,287,557,448,78,156,365,692,863,976,711,170,179,520,665,204,670,492,817,805,20,14,427,799,932,777,152,784,645,738,127,290,333,713,272,88,764,232,679,703,731,793,71,194,222,266,923,449,299,898,750,882,876");
        ArrayGenerator.printintArray(arr);
        long start = System.nanoTime();
        arr = new SwappingSort().sort(arr);
        long end = System.nanoTime();
        ArrayGenerator.printintArray(arr);
        long time = end - start;
        System.out.println(" Array Lenght:" + arr.length);
        System.out.println(" Swap count:" + swapCount);
        System.out.println(" Took " + time + " nano Seconds");
        System.out.println(" Took " + time / 1000000 + " milli Seconds");
    }
}
