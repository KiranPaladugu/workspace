/* ********************************************************************************
 * All rights reserved.
 ******************************************************************************* */
package com.tcs.tools;

import java.io.*;

import com.jcraft.jsch.*;

public class SSHConnection {
    /**
     * 
     */
    public static final String subsystem = "subsystem";
    public static final int SUBSYSTEM = 1;
    private int port;
    private String hostname;
    private String username;
    private String password;
    private String subsystemName;
    private String endOfSatement;
    private Channel channel;
    private PipedInputStream outputPipe;
    private PipedOutputStream inputPipe;
    private ConnectionListener listener;
    private boolean initalized = false;
    private RequestHandler requestHandler;
    private ResponseHandler responseHandler;
    private Session session;
    private BlockingQueue<Message<String>> messageQueue = new BlockingQueue<Message<String>>(1);;

    public void initialize(String hostname, int port, String username) throws Exception {
        this.username = username;
        this.hostname = hostname;
        this.port = port;
        initialize();
    }

    public void initialize(String hostname, int port, String username, String password) throws Exception {
        this.password = password;
        initialize(hostname, port, username);

    }

    public void initialize() throws Exception {
        validate();
        JSch sch = new JSch();
        try {
            session = sch.getSession(username, hostname, port);
            session.setPassword(password);
            UserInfo ui = new MyUserInfo() {
                public void showMessage(String message) {
                }

                public boolean promptYesNo(String message) {
                    return true;
                }
                // If password is not given before the invocation of Session#connect(),
                // implement also following methods,
                //   * UserInfo#getPassword(),
                //   * UserInfo#promptPassword(String message) and
                //   * UIKeyboardInteractive#promptKeyboardInteractive()
            };

            session.setUserInfo(ui);
            session.connect();
            ChannelSubsystem channel = (ChannelSubsystem) session.openChannel("subsystem");
            channel.setSubsystem("netconf-ecim");
            channel.setPty(true);
            this.channel = channel;
            outputPipe = new PipedInputStream();
            inputPipe = new PipedOutputStream();
            channel.setErrStream(System.err);
            //            channel.setInputStream(System.in);
            channel.setInputStream(new PipedInputStream(inputPipe));
            channel.setOutputStream(new PipedOutputStream(outputPipe));
            initalized = true;
        } catch (JSchException | IOException e) {
            e.printStackTrace();
            throw e;
        }
    }

    /**
     * 
     */
    private void validate() {
        if (hostname == null || hostname.length() <= 0) {
            throw new IllegalArgumentException("hostname");
        }

        if (port <= 0) {
            throw new IllegalArgumentException("Invalid port number");
        }

        if (username == null || username.length() <= 0) {
            throw new IllegalArgumentException("username");
        }

        if (password == null || password.length() <= 0) {
            throw new IllegalArgumentException("password");
        }
    }

    public void write(String message) {
        try {
            //            inputPipe.write(message.getBytes());
            messageQueue.insert(new Message<String>(Message.REQUEST, message));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public synchronized InputStream getInputStream() {
        return this.outputPipe;
    }

    public synchronized OutputStream getOutputStream() {
        return this.inputPipe;
    }

    public void setConnectionListener(ConnectionListener listener) {
        this.listener = listener;
    }

    public void connect() {
        if (!initalized) {
            throw new IllegalStateException("Not Initalized state");
        }
        try {
            channel.connect();
            if (channel.isConnected()) {
                responseHandler = new ResponseHandler(this, messageQueue);
                requestHandler = new RequestHandler(this, messageQueue);
                if (listener != null) {
                    listener.connected(new ConnectionEvent(this, ConnectionEvent.CONNECTED));
                }
            }

        } catch (JSchException e) {
            e.printStackTrace();
        }
    }

    public void disConnect() {
        channel.disconnect();
        session.disconnect();
    }

    public void write(Message<String> mesage) {
        try {
            messageQueue.insert(mesage);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public String read() {
        Message<String> message = messageQueue.peek();
        if(message!=null&&message.isRequest()){
            try {
                return messageQueue.remove().getMessage();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    public boolean isConnected() {
        return channel.isConnected();
    }

    public int getPort() {
        return port;
    }

    public void setPort(int port) {
        this.port = port;
    }

    public String getHostname() {
        return hostname;
    }

    public void setHostname(String hostname) {
        this.hostname = hostname;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getSubsystemName() {
        return subsystemName;
    }

    public void setSubsystemName(String subsystemName) {
        this.subsystemName = subsystemName;
    }

    public static void main(String[] args) throws Exception {
        SSHConnection provider = new SSHConnection();
        provider.initialize("10.170.117.194", 830, "test", "test");
        provider.connect();
        System.out.println("Below is the response from Server::");
        System.out.println(provider.read());
        String hello = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><hello xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n"
                + "<capabilities>\n" + "<capability>urn:ietf:params:netconf:base:1.0</capability>\n"
                + "<capability>urn:ietf:params:xml:ns:netconf:base:1.0</capability>\n"
                + "<capability>urn:ietf:params:xml:ns:netconf:capability:rollback-on-error:1.0</capability>\n"
                + "<capability>urn:ietf:params:netconf:capability:writable-running:1.0</capability>\n"
                + "<capability>urn:ietf:params:xml:ns:netconf:capability:candidate:1.0</capability>\n"
                + "<capability>urn:ietf:params:xml:ns:netconf:capability:validate:1.0</capability>\n"
                + "<capability>urn:ietf:params:netconf:capability:candidate:1.0</capability>\n"
                + "<capability>urn:ietf:params:netconf:capability:validate:1.0</capability>\n"
                + "<capability>urn:ericsson:com:netconf:action:1.0</capability>\n"
                + "<capability>urn:ietf:params:netconf:capability:notification:1.0</capability>\n"
                + "<capability>urn:ericsson:com:netconf:notification:1.1</capability>\n"
                + "<capability>urn:com:ericsson:ebase:0.1.0</capability>\n"
                + "<capability>urn:com:ericsson:ebase:1.1.0</capability>\n"
                + "<capability>urn:com:ericsson:ebase:1.2.0</capability>\n"
                + "<capability>urn:ericsson:com:netconf:heartbeat:1.0</capability>\n"
                + "<capability>urn:com:ericsson:ipos:exec-cli:1.0</capability>\n"
                + "<capability>urn:com:ericsson:ipos:invoke-cli:1.0</capability>\n" + "</capabilities>\n" + "</hello>]]>]]>\n";
        provider.write(hello);

        String get = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
                + "<rpc message-id=\"4\"     xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n" + "<get></get>\n" + "</rpc>\n"
                + "]]>]]>\n";
        //        System.out.println(provider.read());
        provider.write(get);
        String response = provider.read();
        System.out.println("Below is the response from Server::");
        System.out.println(response);

        String close = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
                + "<rpc message-id=\"266\"    xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n" + "<close-session/>\n"
                + "</rpc>\n" + "]]>]]>\n";
        provider.write(close);
        System.out.println(provider.read());
        provider.disConnect();
    }

    public String getEndOfSatement() {
        return endOfSatement;
    }

    public void setEndOfSatement(String endOfSatement) {
        this.endOfSatement = endOfSatement;
    }

    public ResponseHandler getResponseHandler() {
        return responseHandler;
    }

    public void setResponseHandler(ResponseHandler responseHandler) {
        this.responseHandler = responseHandler;
    }

    public RequestHandler getRequestHandler() {
        return requestHandler;
    }

    public void setRequestHandler(RequestHandler requestHandler) {
        this.requestHandler = requestHandler;
    }
}
